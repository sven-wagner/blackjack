{"version":3,"sources":["components/Karten.js","components/PlayerFeld.js","Config.js","App.js","serviceWorker.js","index.js"],"names":["Karten","this","props","form","className","zahl","getKarte","Component","PlayerFeld","name","points","karten","map","item","key","Value","Suit","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","suits","values","app","firebase","initializeApp","Player","SpielerNummer","currentPlayer","deck","App","db_getdata","col","callback","database","ref","child","on","snap","val","state","change","winnertxt","Mischen","bind","DeckErstellen","SpierlerErstellen","setName","data","splice","length","JSON","parse","setState","CheckWinner","UpdatePlayerData","UpdateCountPlayer","value","db_update","alert","update","stringify","KarteHinzufuegen","CheckPoints","StartKarten","i","karte","temp","Points","Weight","Hand","push","shift","Number","NextPlayer","winner","Name","ID","pos1","Math","floor","random","pos2","x","weight","parseInt","card","id","hand","Array","player","window","location","reload","e","target","onClick","RestartGame","Reset","ButtonClickReset","join","type","placeholder","aria-label","onChange","getPlayerText","ButtonClickKarte","getText","btnRestart","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAGqBA,E,yKAEb,MAAqB,UAAlBC,KAAKC,MAAMC,MAA+B,UAAlBF,KAAKC,MAAMC,KAE9B,yBAAKC,UAAU,gCACf,yBAAKA,UAAU,OACVH,KAAKC,MAAMG,MAEhB,yBAAKD,UAAU,OACVH,KAAKC,MAAMC,OAQhB,yBAAKC,UAAU,qBACf,yBAAKA,UAAU,OACVH,KAAKC,MAAMG,MAEhB,yBAAKD,UAAU,OACVH,KAAKC,MAAMC,S,+BAOxB,OACQ,yBAAKC,UAAU,gCACZH,KAAKK,gB,GA/BYC,aCCfC,E,kDAEjB,aAAc,wC,qDAMV,OACI,yBAAKJ,UAAU,YACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,OACVH,KAAKC,MAAMO,MAEhB,yBAAKL,UAAU,OACVH,KAAKC,MAAMQ,QAEhB,yBAAKN,UAAU,qCAEPH,KAAKC,MAAMS,OAAOC,KAAI,SAAAC,GAAI,OAClB,kBAAC,EAAD,CACAC,IAAKD,EACLR,KAAMQ,EAAKE,MACXZ,KAAMU,EAAKG,iB,GAvBPT,a,QCOvBU,EAXC,CACdC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBCFfC,EAAQ,CAAC,SAAK,SAAK,SAAK,UACxBC,EAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,KAEvEC,E,OAAMC,EAASC,cAAcb,GAE7Bc,EAAS,GACTC,EAAgB,EAChBC,EAAgB,EAChBC,EAAO,GACPzB,EAAO,SAEU0B,E,kDACnB,aAAe,IAAD,8BACZ,gBAgFFC,WAAa,SAACC,EAAKC,GACFV,EAAIW,WAAWC,MAAMC,MAAMJ,GACjCK,GAAG,SAAS,SAAAC,GACnBL,EAASK,EAAKC,WAjFhB,EAAKC,MAAQ,CACXC,QAAQ,EACRC,UAAW,IAGb,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,kBAAoB,EAAKA,kBAAkBF,KAAvB,gBACzB,EAAKG,QAAU,EAAKA,QAAQH,KAAb,gBAXH,E,gEAeO,IAAD,OAClBhD,KAAKmC,WAAW,WAAW,SAACiB,GAEd,KADAA,EAAKA,OAEftB,EAAOuB,OAAO,EAAGvB,EAAOwB,QACxBxB,EAASyB,KAAKC,MAAMJ,EAAKA,MACzB,EAAKjB,WAAW,QAAQ,SAACiB,GACvBnB,EAAOsB,KAAKC,MAAMJ,EAAKA,MACvB,EAAKjB,WAAW,iBAAiB,SAACiB,GAEZ,MADpBpB,EAAgBuB,KAAKC,MAAMJ,EAAKA,OAE9B,EAAKK,SAAS,CAAEX,UAAW,KAG3B,EAAKY,cAEP,EAAKD,SAAS,CAAEZ,QAAQ,gB,6BAO1B,IAAD,OACL7C,KAAK2D,kBAAiB,WACpB,EAAKC,mBAAkB,oB,uCAMVvB,GAAW,IAAD,OACzBrC,KAAKmC,WAAW,WAAW,SAAC0B,GACL,GAAjB9B,IACgB,KAAd8B,EAAMT,KACR,EAAKF,kBAAkB,GAAG,WACxBnB,EAAgB,EAChB,EAAK+B,UAAU,UAAWhC,OAI5BA,EAASyB,KAAKC,MAAMK,EAAMT,OACfE,OAAS,EAClB,EAAKJ,kBAAmBpB,EAAOwB,OAAS,GAAI,WAC1CvB,EAAgBD,EAAOwB,OACvB,EAAKQ,UAAU,UAAWhC,MAI5BiC,MAAM,0BAKd1B,M,wCAEgBA,GAChBA,M,gCAIQD,EAAKgB,GACEzB,EAAIW,WAAWC,MAAMC,MAAMJ,GACjC4B,OAAO,CAAEZ,KAAMG,KAAKU,UAAUb,O,yCAUrB,IAAD,OACI,KAAjBpB,GAAwC,GAAjBA,GAAsBA,GAAiBD,GAChE/B,KAAKkE,kBAAiB,WACpB,EAAKC,mB,yCAKS,IAAD,OACI,GAAjBpC,GACF/B,KAAKiD,eAAc,WACjB,EAAKF,SAAQ,WACX,EAAKqB,aAAY,WACfpC,EAAgB,EAChB,EAAK8B,UAAU,gBAAiB,c,kCAO9BzB,GACV,GAAqB,GAAjBN,EACF,IAAK,IAAIsC,EAAI,EAAGA,EAAIvC,EAAOwB,OAAQe,IAAK,CACtC,IAAIC,EAAQrC,EAAK,GACbsC,EAAOzC,EACXyC,EAAKF,GAAGG,QAAUF,EAAMG,OACxBF,EAAKF,GAAGK,KAAKC,KAAKL,GAClBxC,EAASyC,EACTtC,EAAK2C,QACL5E,KAAK8D,UAAU,OAAQ7B,GACvBjC,KAAK8D,UAAU,UAAWhC,GAG9BO,M,oCAIIwC,OAAO/C,EAAOE,EAAgB,GAAGwC,SAAWK,OAAO,KACrD7E,KAAK8E,e,mCAKP,GAAI9C,GAAiBD,GACE,KAAjBC,GAAwC,GAAjBA,EAAoB,CAC7C,GAAKA,EAAgB,GAAMF,EAAOwB,OAAS,EAAG,CAC5C,IAAIiB,EAAOvC,EAAgB,EAC3BA,EAAgBuC,EAChBvE,KAAK8D,UAAU,gBAAiBS,QAGhCvC,EAAgB,IAChBhC,KAAK8D,UAAU,gBAAiB,KAChC9D,KAAK0D,cAEP1D,KAAK8D,UAAU,OAAQ7B,M,oCAO3B,IADA,IAAI8C,EAAS,GACJV,EAAI,EAAGA,EAAIvC,EAAOwB,OAAQe,IACjC,GAAqB,GAAjBU,EAAOzB,QAAexB,EAAOuC,GAAGG,QAAU,GAAI,CAChD,IAAID,EAAO,CAAE,KAAQzC,EAAOuC,GAAGW,KAAM,OAAUlD,EAAOuC,GAAGG,QACzDO,EAAOJ,KAAKJ,QAET,GAAIzC,EAAOuC,GAAGG,QAAU,IAAM1C,EAAOuC,GAAGG,OAASO,EAAO,GAAGP,OAAQ,CACtEO,EAAS,GACLR,EAAO,CAAE,KAAQzC,EAAOuC,GAAGW,KAAM,OAAUlD,EAAOuC,GAAGG,QACzDO,EAAOJ,KAAKJ,QAET,GAAIzC,EAAOuC,GAAGG,QAAU,IAAM1C,EAAOuC,GAAGG,OAASO,EAAO,GAAGP,OAAQ,CAClED,EAAO,CAAE,KAAQzC,EAAOuC,GAAGW,KAAM,OAAUlD,EAAOuC,GAAGG,QACzDO,EAAOJ,KAAKJ,GAIhB,GAAoB,GAAjBQ,EAAOzB,OACRtD,KAAKyD,SAAS,CAACX,UAAW,gCAEvB,GAAoB,GAAjBiC,EAAOzB,OACbtD,KAAKyD,SAAS,CAACX,UAAWiC,EAAO,GAAGC,KAAO,sBAEzC,CAEF,IADIT,EAAO,GACHF,EAAI,EAAGA,EAAIU,EAAOzB,OAAQe,IAChCE,GAAQQ,EAAOV,GAAGW,KAAM,KAE1BhF,KAAKyD,SAAS,CAACX,UAAWyB,EAAO,uB,uCAIpBlC,GACf,GAAIJ,EAAKqB,OAAS,EAEhB,IADA,IAAIgB,EAAQrC,EAAK,GACRoC,EAAI,EAAGA,EAAIvC,EAAOwB,OAAQe,IACjC,GAAIvC,EAAOuC,GAAGY,IAAMlD,EAAe,CACjC,IAAIwC,EAAOzC,EACXyC,EAAKF,GAAGG,QAAUF,EAAMG,OACxBF,EAAKF,GAAGK,KAAKC,KAAKL,GAClBxC,EAASyC,EACTtC,EAAK2C,QACL5E,KAAK8D,UAAU,OAAQ7B,GACvBjC,KAAK8D,UAAU,UAAWhC,GAC1B,MAINO,M,8BAGMA,GACN,IAAK,IAAIgC,EAAI,EAAGA,EAAI,IAAMA,IAAK,CAC7B,IAAIa,EAAOC,KAAKC,MAAOD,KAAKE,SAAWpD,EAAKqB,QACxCgC,EAAOH,KAAKC,MAAOD,KAAKE,SAAWpD,EAAKqB,QACxCiB,EAAOtC,EAAKiD,GAEhBjD,EAAKiD,GAAQjD,EAAKqD,GAClBrD,EAAKqD,GAAQf,EAEfvE,KAAK8D,UAAU,OAAQ7B,GACvBI,M,oCAGYA,GAIZ,IADA,IAAIkC,EADJtC,EAAO,GAEEoC,EAAI,EAAGA,EAAI3C,EAAO4B,OAAQe,IAAK,CACtC,IAAK,IAAIkB,EAAI,EAAGA,EAAI9D,EAAM6B,OAAQiC,IAAK,CAErC,IAAIC,EAASC,SAAS/D,EAAO2C,IAEZ,KAAb3C,EAAO2C,IAA0B,KAAb3C,EAAO2C,IAA0B,KAAb3C,EAAO2C,KACjDmB,EAAS,IAEM,KAAb9D,EAAO2C,KACTmB,EAAS,IAGX,IAAIE,EAAO,CAAE5E,MAAOY,EAAO2C,GAAItD,KAAMU,EAAM8D,GAAId,OAAQe,GAEvDjB,EAAKI,KAAKe,GAEZzD,EAAOsC,EAETlC,M,wCAGgBsD,EAAItD,GAEpB,IAAIkC,EAAOzC,EACP8D,EAAO,IAAIC,MACXC,EAAS,CAAEd,KAAMxE,EAAMyE,GAAIU,EAAInB,OAAQ,EAAGE,KAAMkB,GACpDrB,EAAKI,KAAKmB,GAEVhE,EAASyC,EACTlC,M,gCAIA,GAAqB,KAAjBL,GAAyC,GAAjBA,EAC1B,OACE,wBAAI7B,UAAU,gDAAgD2B,EAAO+C,OAAO7C,GAAiB,GAAGgD,KAAhG,e,8BAMJhF,KAAK8D,UAAU,UAAW,GAC1B9D,KAAK8D,UAAU,gBAAiB,GAChCiC,OAAOC,SAASC,W,sCAGhB,GAAqB,GAAjBlE,EACF,OACE,wBAAI5B,UAAU,uBAAuB2B,EAAO+C,OAAO9C,GAAiB,GAAGiD,Q,8BAKrEkB,GACN1F,EAAO0F,EAAEC,OAAOtC,Q,oCAIhB,IADY,IAAD,OACHQ,EAAI,EAAGA,EAAIvC,EAAOwB,OAAQe,IAChCvC,EAAOuC,GAAGK,KAAO,GACjB5C,EAAOuC,GAAGG,OAAS,EAGrBxE,KAAKiD,eAAc,WACjB,EAAKF,SAAQ,WACX,EAAKqB,aAAY,WACf,EAAKN,UAAU,OAAQ7B,GACvB,EAAK6B,UAAU,UAAWhC,GAC1B,EAAKgC,UAAU,gBAAiB,c,mCAM3B,IAAD,OACV,OAAoB,GAAjB/B,GAAuC,KAAjBC,GAAgD,IAAxBhC,KAAK4C,MAAME,UAExD,yBAAK3C,UAAU,qCACb,4BAAQA,UAAU,wCAAwCiG,QAAS,WAAQ,EAAKC,gBAAhF,YAImB,GAAjBtE,GAA8C,IAAxB/B,KAAK4C,MAAME,UAErC,wBAAI3C,UAAU,gDAAd,8BAFC,I,+BAOG,IAAD,SACP,OACE,yBAAKA,UAAU,QACb,yBAAKA,UAAU,qCACb,4BAAQA,UAAU,uCAAuCiG,QAAS,WAAQ,EAAKE,UAA/E,SACA,4BAAQnG,UAAU,uCAAuCiG,QAAS,WAAQ,EAAKG,qBAA/E,SACA,4BAAQpG,UAAU,uCAAuCiG,QAAS,WAAQ,EAAKI,SAA/E,QACA,2BAAOC,KAAK,OAAOtG,UAAU,yCAAyCuG,YAAY,OAAOC,aAAW,OAAOC,SAAU5G,KAAKmD,WAE5H,yBAAKhD,UAAU,qCACZH,KAAK6G,gBACN,4BAAQ1G,UAAU,qCAAqCiG,QAAS,WAAQ,EAAKU,qBAA7E,OACA,4BAAQ3G,UAAU,qCAAqCiG,QAAS,WAAQ,EAAKtB,eAA7E,UAED9E,KAAK+G,UACN,wBAAI5G,UAAU,gDAAgDH,KAAK4C,MAAME,WACxE9C,KAAKgH,aAEL,yBAAK7G,UAAU,qCAAf,UAEG2B,SAFH,aAEG,EAAQnB,KAAI,SAAAC,GAAI,OACd,kBAAC,EAAD,CACEC,IAAKD,EAAKqE,GACVzE,KAAMI,EAAKoE,KACXvE,OAAQG,EAAK4D,OACb9D,OAAQE,EAAK8D,gB,GA7UIpE,aCLb2G,QACW,cAA7BlB,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.027df91c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Karten extends Component {\r\n    getKarte(){\r\n        if(this.props.form ==\"♥\" ||this.props.form ==\"♦\"){\r\n            return(\r\n                <div className=\"card text-center text-danger\">\r\n                <div className=\"col\">\r\n                    {this.props.zahl}\r\n                </div>\r\n                <div className=\"col\">\r\n                    {this.props.form}\r\n                </div>\r\n            </div>\r\n            )\r\n           \r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"card text-center \">\r\n                <div className=\"col\">\r\n                    {this.props.zahl}\r\n                </div>\r\n                <div className=\"col\">\r\n                    {this.props.form}\r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n                <div className=\"col-sm-2 ml-1 mr-1 mt-1 mb-1\">\r\n                  {this.getKarte()}\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nKarten.propTypes = {\r\n    zahl: PropTypes.string,\r\n    form: PropTypes.string\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\nimport Karten from './Karten';\r\n\r\nexport default class PlayerFeld extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n       \r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-sm-3\">\r\n                <div className=\"card text-center\">\r\n                    <div className=\"col\">\r\n                        {this.props.name}\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        {this.props.points}\r\n                    </div>\r\n                    <div className=\"row d-flex justify-content-center\">\r\n                        {\r\n                            this.props.karten.map(item =>\r\n                                    <Karten\r\n                                    key={item}\r\n                                    zahl={item.Value}\r\n                                    form={item.Suit}\r\n                                />\r\n                            ) \r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nPlayerFeld.propTypes = {\r\n    name: PropTypes.string,\r\n    points: PropTypes.number,\r\n    karten: PropTypes.array\r\n}","const DB_CONFIG = {\r\n    apiKey: \"AIzaSyAWywfEkMvd2_F_2dNSTYvHUvoE-L3Q8gA\",\r\n    authDomain: \"blackjack-f985f.firebaseapp.com\",\r\n    databaseURL: \"https://blackjack-f985f.firebaseio.com\",\r\n    projectId: \"blackjack-f985f\",\r\n    storageBucket: \"blackjack-f985f.appspot.com\",\r\n    messagingSenderId: \"943105441301\",\r\n    appId: \"1:943105441301:web:cec433cb166cf6077bd81c\",\r\n    measurementId: \"G-TG145BVRSB\"\r\n  };\r\n\r\n  export default DB_CONFIG;","import React, { Component } from 'react'\nimport PlayerFeld from './components/PlayerFeld';\n\nimport firebase from 'firebase';\nimport DB_CONFIG from './Config';\n\nvar suits = [\"♠\", \"♥\", \"♦\", \"♣\"];\nvar values = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"];\n\nvar app = firebase.initializeApp(DB_CONFIG);\n\nvar Player = [];\nvar SpielerNummer = 0;\nvar currentPlayer = 0;\nvar deck = [];\nvar name = \"Player\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      change: false,\n      winnertxt: \"\"\n    }\n\n    this.Mischen = this.Mischen.bind(this);\n    this.DeckErstellen = this.DeckErstellen.bind(this);\n    this.SpierlerErstellen = this.SpierlerErstellen.bind(this);\n    this.setName = this.setName.bind(this);\n\n  }\n\n  componentDidMount() {\n    this.db_getdata('Players', (data) => {\n      var temp = (data.data)\n      if (temp != \"0\") {\n        Player.splice(0, Player.length)\n        Player = JSON.parse(data.data);\n        this.db_getdata('deck', (data) => {\n          deck = JSON.parse(data.data)\n          this.db_getdata('currentPlayer', (data) => {\n            currentPlayer = JSON.parse(data.data)\n            if(currentPlayer != 100){\n              this.setState({ winnertxt: \"\" })\n            }\n            else{\n              this.CheckWinner();\n            }\n            this.setState({ change: true })\n          })\n        })\n      }\n    })\n  }\n\n  join() {\n    this.UpdatePlayerData(() => {\n      this.UpdateCountPlayer(() => {\n\n      })\n    });\n  }\n\n  UpdatePlayerData(callback) {\n    this.db_getdata('Players', (value) => {\n      if (SpielerNummer == 0) {\n        if (value.data == \"0\") {\n          this.SpierlerErstellen(1, () => {\n            SpielerNummer = 1;\n            this.db_update('Players', Player)\n          })\n        }\n        else {\n          Player = JSON.parse(value.data)\n          if (Player.length < 4) {\n            this.SpierlerErstellen((Player.length + 1), () => {\n              SpielerNummer = Player.length\n              this.db_update('Players', Player)\n            })\n          }\n          else {\n            alert(\"Die Lobby ist voll\");\n          }\n        }\n      }\n    });\n    callback();\n  }\n  UpdateCountPlayer(callback) {\n    callback();\n  }\n\n\n  db_update(col, data) {\n    var database = app.database().ref().child(col);\n    database.update({ data: JSON.stringify(data) })\n  }\n\n  db_getdata = (col, callback) => {\n    var database = app.database().ref().child(col);\n    database.on('value', snap => {\n      callback(snap.val())\n    })\n  }\n\n  ButtonClickKarte() {\n    if (currentPlayer != 100 &&currentPlayer != 0 && currentPlayer == SpielerNummer) {\n      this.KarteHinzufuegen(() => {\n        this.CheckPoints()\n      });\n    }\n  }\n\n  ButtonClickReset() {\n    if (SpielerNummer == 1) {\n      this.DeckErstellen(() => {\n        this.Mischen(() => {\n          this.StartKarten(() => {\n            currentPlayer = 1;\n            this.db_update('currentPlayer', 1)\n          })\n        });\n      })\n    }\n  }\n\n  StartKarten(callback) {\n    if (SpielerNummer == 1) {\n      for (var i = 0; i < Player.length; i++) {\n        var karte = deck[0];\n        var temp = Player;\n        temp[i].Points += karte.Weight;\n        temp[i].Hand.push(karte);\n        Player = temp\n        deck.shift();\n        this.db_update('deck', deck);\n        this.db_update('Players', Player);\n      }\n    }\n    callback();\n  }\n\n  CheckPoints() {\n    if (Number(Player[currentPlayer - 1].Points) >= Number(21)) {\n      this.NextPlayer();\n    }\n  }\n\n  NextPlayer() {\n    if (currentPlayer == SpielerNummer) {\n      if (currentPlayer != 100 &&currentPlayer != 0) {\n        if ((currentPlayer + 1) != Player.length + 1) {\n          var temp = currentPlayer + 1;\n          currentPlayer = temp;\n          this.db_update('currentPlayer', temp)\n        }\n        else {\n          currentPlayer = 100;\n          this.db_update('currentPlayer', 100)\n          this.CheckWinner();\n        }\n        this.db_update('deck', deck);\n      }\n    }\n  }\n\n  CheckWinner() {\n    var winner = [];\n    for (var i = 0; i < Player.length; i++) {\n      if (winner.length == 0 && Player[i].Points <= 21) {\n        var temp = { \"Name\": Player[i].Name, \"Points\": Player[i].Points }\n        winner.push(temp);\n      }\n      else if (Player[i].Points <= 21 && Player[i].Points > winner[0].Points) {\n        winner = [];\n        var temp = { \"Name\": Player[i].Name, \"Points\": Player[i].Points }\n        winner.push(temp);\n      }\n      else if (Player[i].Points <= 21 && Player[i].Points > winner[0].Points) {\n        var temp = { \"Name\": Player[i].Name, \"Points\": Player[i].Points }\n        winner.push(temp);\n      }\n    }\n\n    if(winner.length == 0){\n      this.setState({winnertxt: \"Keiner konnte gewinnen\"})\n    }\n    else if(winner.length == 1){\n      this.setState({winnertxt: winner[0].Name + \" hat gewonnen\"})\n    }\n    else{\n      var temp = \"\";\n      for(var i = 0; i < winner.length; i++){\n        temp += winner[i].Name +\", \"\n      }\n      this.setState({winnertxt: temp + \" haben gewonnen\"})\n    }\n  }\n\n  KarteHinzufuegen(callback) {\n    if (deck.length > 0) {\n      var karte = deck[0];\n      for (var i = 0; i < Player.length; i++) {\n        if (Player[i].ID == SpielerNummer) {\n          var temp = Player;\n          temp[i].Points += karte.Weight;\n          temp[i].Hand.push(karte);\n          Player = temp;\n          deck.shift();\n          this.db_update('deck', deck);\n          this.db_update('Players', Player);\n          break;\n        }\n      }\n    }\n    callback();\n  }\n\n  Mischen(callback) {\n    for (var i = 0; i < 1000; i++) {\n      var pos1 = Math.floor((Math.random() * deck.length));\n      var pos2 = Math.floor((Math.random() * deck.length));\n      var temp = deck[pos1];\n\n      deck[pos1] = deck[pos2];\n      deck[pos2] = temp;\n    }\n    this.db_update('deck', deck);\n    callback();\n  }\n\n  DeckErstellen(callback) {\n\n    deck = [];\n    var temp = deck;\n    for (var i = 0; i < values.length; i++) {\n      for (var x = 0; x < suits.length; x++) {\n\n        var weight = parseInt(values[i]);\n\n        if (values[i] == \"J\" || values[i] == \"Q\" || values[i] == \"K\") {\n          weight = 10;\n        }\n        if (values[i] == \"A\") {\n          weight = 11;\n        }\n\n        var card = { Value: values[i], Suit: suits[x], Weight: weight };\n\n        temp.push(card)\n      }\n      deck = temp;\n    }\n    callback();\n  }\n\n  SpierlerErstellen(id, callback) {\n\n    var temp = Player;\n    var hand = new Array();\n    var player = { Name: name, ID: id, Points: 0, Hand: hand };\n    temp.push(player);\n\n    Player = temp;\n    callback();\n  }\n\n  getText() {\n    if (currentPlayer != 100 && currentPlayer != 0) {\n      return (\n        <h1 className=\"text-white row d-flex justify-content-center\">{Player[Number(currentPlayer) - 1].Name} ist dran</h1>\n      )\n    }\n  }\n\n  Reset() {\n    this.db_update('Players', 0);\n    this.db_update('currentPlayer', 0)\n    window.location.reload();\n  }\n  getPlayerText() {\n    if (SpielerNummer != 0) {\n      return (\n        <h6 className=\"text-white m-2 mt-3\">{Player[Number(SpielerNummer) - 1].Name}</h6>\n      )\n    }\n  }\n\n  setName(e) {\n    name = e.target.value;\n  }\n\n  RestartGame(){\n    for(var i = 0; i < Player.length; i++){\n      Player[i].Hand = [];\n      Player[i].Points = 0;\n    }\n\n    this.DeckErstellen(() =>{\n      this.Mischen(() =>{\n        this.StartKarten(() =>{\n          this.db_update('deck', deck);\n          this.db_update('Players', Player);\n          this.db_update('currentPlayer', 1)\n        })\n      })\n    })\n  }\n\n  btnRestart(){\n    if(SpielerNummer == 1 && currentPlayer == 100 && this.state.winnertxt != \"\"){\n      return(\n        <div className=\"row d-flex justify-content-center\">\n          <button className=\"btn btn btn-outline-warning m-2 mt-2 \" onClick={() => { this.RestartGame() }}>Restart</button>\n        </div>\n      )\n    }\n    else if(SpielerNummer != 1 && this.state.winnertxt != \"\"){\n      return(\n        <h3 className=\"text-white row d-flex justify-content-center\">Warte auf dem Host...</h3>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Page\">\n        <div className=\"row d-flex justify-content-center\">\n          <button className=\"btn btn btn-outline-warning m-2 mt-2\" onClick={() => { this.Reset() }}>Reset</button>\n          <button className=\"btn btn btn-outline-warning m-2 mt-2\" onClick={() => { this.ButtonClickReset() }}>Start</button>\n          <button className=\"btn btn btn-outline-warning m-2 mt-2\" onClick={() => { this.join() }}>Join</button>\n          <input type=\"text\" className=\"form-control w-25 m-2 mt-2 btn-warning\" placeholder=\"Name\" aria-label=\"Name\" onChange={this.setName}></input>\n        </div>\n        <div className=\"row d-flex justify-content-center\">\n          {this.getPlayerText()}\n          <button className=\"btn btn btn-outline-light m-2 mt-2\" onClick={() => { this.ButtonClickKarte() }}>Hit</button>\n          <button className=\"btn btn btn-outline-light m-2 mt-2\" onClick={() => { this.NextPlayer() }}>Stand</button>\n        </div>\n        {this.getText()}\n        <h1 className=\"text-white row d-flex justify-content-center\">{this.state.winnertxt}</h1>\n        {this.btnRestart()}\n\n        {<div className=\"row d-flex justify-content-center\">\n          {\n            Player?.map(item =>\n              <PlayerFeld\n                key={item.ID}\n                name={item.Name}\n                points={item.Points}\n                karten={item.Hand}\n              />\n            )\n          }\n        </div>}\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}